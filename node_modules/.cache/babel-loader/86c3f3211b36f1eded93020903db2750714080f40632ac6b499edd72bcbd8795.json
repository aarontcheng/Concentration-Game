{"ast":null,"code":"import{Card,CardSubtitle,CardTitle,CardBody}from\"reactstrap\";import React,{Component}from\"react\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";class Stopwatch extends Component{constructor(props){super(props);// We need ref in this, because we are dealing\n// with JS setInterval to keep track of it and\n// stop it when needed\n// Plan: use geek for geek's countdown timer and change to stopwatch\nthis.getTimeRemaining=e=>{const total=Date.parse(new Date())-Date.parse(e);const seconds=Math.floor(total/1000%60);const minutes=Math.floor(total/1000/60%60);const hours=Math.floor(total/1000/60/60%24);return{total,hours,minutes,seconds};};this.startTimer=e=>{let{total,hours,minutes,seconds}=this.getTimeRemaining(e);if(this.props.gameOver===false){// update the timer\n// check if less than 10 then we need to\n// add '0' at the beginning of the variable\nthis.setState({timer:(hours>9?hours:\"0\"+hours)+\":\"+(minutes>9?minutes:\"0\"+minutes)+\":\"+(seconds>9?seconds:\"0\"+seconds)});}};this.clearTimer=e=>{// If you adjust it you should also need to\n// adjust the Endtime formula we are about\n// to code next\nthis.setState({timer:\"00:00:00\"});// If you try to remove this line the\n// updating of timer Variable will be\n// after 1000ms or 1sec\nif(this.Ref.current)clearInterval(this.Ref.current);const id=setInterval(()=>{this.startTimer(e);},1000);this.Ref.current=id;};this.getDeadTime=()=>{let deadline=new Date();// This is where you need to adjust if\n// you extend to add more time\ndeadline.setSeconds(deadline.getSeconds());return deadline;};// Another way to call the clearTimer() to start\n// the countdown is via action event from the\n// button first we create function to be called\n// by the button\nthis.onClickReset=()=>{this.clearTimer(this.getDeadTime());};// callback for restarting\nthis.restart=()=>{this.props.restart();this.onClickReset();};// I need a way for the parent app to call the clearTimer.\nthis.returnSelf=()=>{this.props.callback(this);};this.redOrGreenLight=()=>{if(this.props.gameOver===true){return\"inactive\";}else{return\"active\";}};this.Ref=/*#__PURE__*/React.createRef();// The state for our timer\nthis.state={timer:\"00:00:00\"};this.returnSelf();}// We can use componentDidMount so that when the component\n// mount the timer will start as soon as possible\ncomponentDidMount(){this.clearTimer(this.getDeadTime());}render(){return/*#__PURE__*/_jsxs(\"div\",{className:this.redOrGreenLight(),style:{minWidth:\"fit-content\",width:\"200px\"},children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Timer\"}),/*#__PURE__*/_jsx(\"h2\",{children:this.state.timer}),/*#__PURE__*/_jsx(\"button\",{onClick:this.restart,children:\"Restart\"})]});}}export default Stopwatch;","map":{"version":3,"names":["Card","CardSubtitle","CardTitle","CardBody","React","Component","jsx","_jsx","jsxs","_jsxs","Stopwatch","constructor","props","getTimeRemaining","e","total","Date","parse","seconds","Math","floor","minutes","hours","startTimer","gameOver","setState","timer","clearTimer","Ref","current","clearInterval","id","setInterval","getDeadTime","deadline","setSeconds","getSeconds","onClickReset","restart","returnSelf","callback","redOrGreenLight","createRef","state","componentDidMount","render","className","style","minWidth","width","children","onClick"],"sources":["/Users/aaroncheng/SoftDev/Concentration-Game/src/Stopwatch.js"],"sourcesContent":["import { Card, CardSubtitle, CardTitle, CardBody } from \"reactstrap\";\nimport React, { Component } from \"react\";\n\n\nclass Stopwatch extends Component{\n    constructor(props) {\n        super(props);\n\n        // We need ref in this, because we are dealing\n        // with JS setInterval to keep track of it and\n        // stop it when needed\n        this.Ref = React.createRef();\n\n        // The state for our timer\n        this.state = {\n            timer: \"00:00:00\",\n        };\n\n        this.returnSelf();\n    }\n\n    // Plan: use geek for geek's countdown timer and change to stopwatch\n\n    getTimeRemaining = (e) => {\n        const total = Date.parse(new Date()) - Date.parse(e) ;\n        const seconds = Math.floor((total / 1000) % 60);\n        const minutes = Math.floor((total / 1000 / 60) % 60);\n        const hours = Math.floor((total / 1000 / 60 / 60) % 24);\n        return {\n            total,\n            hours,\n            minutes,\n            seconds,\n        };\n    };\n\n    startTimer = (e) => {\n        let { total, hours, minutes, seconds } = this.getTimeRemaining(e);\n        if (this.props.gameOver === false) {\n            // update the timer\n            // check if less than 10 then we need to\n            // add '0' at the beginning of the variable\n            this.setState({\n                timer:\n                    (hours > 9 ? hours : \"0\" + hours) +\n                    \":\" +\n                    (minutes > 9 ? minutes : \"0\" + minutes) +\n                    \":\" +\n                    (seconds > 9 ? seconds : \"0\" + seconds),\n            });\n        }\n    };\n\n    clearTimer = (e) => {\n        // If you adjust it you should also need to\n        // adjust the Endtime formula we are about\n        // to code next\n        this.setState({ timer: \"00:00:00\" });\n\n        \n\n        // If you try to remove this line the\n        // updating of timer Variable will be\n        // after 1000ms or 1sec\n        if (this.Ref.current) clearInterval(this.Ref.current);\n        const id = setInterval(() => {\n            this.startTimer(e);\n        }, 1000);\n        this.Ref.current = id;\n    };\n\n    getDeadTime = () => {\n        let deadline = new Date();\n\n        // This is where you need to adjust if\n        // you extend to add more time\n        deadline.setSeconds(deadline.getSeconds());\n        return deadline;\n    };\n\n    // We can use componentDidMount so that when the component\n    // mount the timer will start as soon as possible\n    componentDidMount() {\n        this.clearTimer(this.getDeadTime());\n    }\n\n    // Another way to call the clearTimer() to start\n    // the countdown is via action event from the\n    // button first we create function to be called\n    // by the button\n    onClickReset = () => {\n        this.clearTimer(this.getDeadTime());\n    };\n\n    // callback for restarting\n    restart = () =>{\n        this.props.restart();\n        this.onClickReset();\n    }\n\n    // I need a way for the parent app to call the clearTimer.\n\n    returnSelf = () =>{\n        this.props.callback(this);\n    }\n\n    redOrGreenLight = () =>{\n        if (this.props.gameOver === true){\n            return \"inactive\";\n        }\n        else{\n            return \"active\";\n        }\n    }\n\n    render() {\n        return (\n            <div className={this.redOrGreenLight()} style={{minWidth: \"fit-content\", width:\"200px\"}}>\n                <h3>Timer</h3>\n                <h2>{this.state.timer}</h2>\n                <button onClick={this.restart}>Restart</button>\n            </div>\n        );\n    }\n\n} export default Stopwatch;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}